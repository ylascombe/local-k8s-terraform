apiVersion: v1
data:
  access.lua: "local _M = {}\nlocal pl_stringx = require \"pl.stringx\"\nlocal http
    = require \"resty.http\"\nlocal kong = kong\n\nfunction _M.run(conf)\n   if (\"GET\"
    == ngx.req.get_method() and pl_stringx.endswith(ngx.var.request_uri, \"/specz\"))
    then\n      local httpc = http:new()\n      local res, err = httpc:request_uri(conf.spec_url,
    {\n  \t  method = \"GET\",\n\t  ssl_verify = false,\n\t  headers = {}\n\t  })\n\n
    \     if err then\n        return kong.response.exit(500, { message = \"An unexpected
    error occurred\" })\n      else\n        --Set a proper Content-Type header based
    on what backend returned\n\tngx.header['Content-Type'] = res.headers['Content-Type']\n\tngx.status
    = res.status\n\tngx.print(res.body)\n\tngx.exit(200)\n      end\n   end\nend\n\nreturn
    _M\n"
  handler.lua: "local access = require \"kong.plugins.kong-spec-expose.access\"\n\nlocal
    KongSpecExpose = {}\n\nKongSpecExpose.PRIORITY = 2400\nKongSpecExpose.VERSION
    = \"1.2\"\n\nfunction KongSpecExpose:access(conf)\n\taccess.run(conf)\nend\n\nreturn
    KongSpecExpose\n"
  schema.lua: |
    local typedefs = require "kong.db.schema.typedefs"

    return {
     name = "kong-spec-expose",
     fields = {
      { consumer = typedefs.no_consumer },
      { protocols = typedefs.protocols_http },
      { config = {
          type = "record",
          fields = {
            { spec_url = { type = "string", default = "default"}, },
            }, }, },
        },
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: kong-spec-expose
  namespace: ingress-kong
